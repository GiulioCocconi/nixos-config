# Copyright (c) 2024 Giulio Cocconi
# SPDX-License-Identifier: MIT

{ lib, options, config, pkgs, ...}:
with lib;
with lib.cogisys;

let
  cfg = config.cogisys.common;
  gui = config.cogisys.system.gui;
in
{
  options.cogisys.common = with types; {
    enable = mkBoolOpt true "Enable common configuration.";
  };

  config = mkMerge [
    (mkIf cfg.enable {
      environment.systemPackages = with pkgs; [
        wget
        bat
        tree
        file
        fzf
        ripgrep
        eza
        killall
        rclone
        zip
        xz
        unzip
        htop
        pciutils
        usbutils
        udiskie
        aria2
        acpilight
        xdg-user-dirs
      ];

      services.udev.packages = [ pkgs.acpilight ];

      programs.nano.enable = mkDefault false;

      programs.neovim = {
        enable = true;
        defaultEditor = true;
      };
      
      programs.dconf.enable = true;
      
      hardware.bluetooth.enable = mkDefault true;
      hardware.enableAllFirmware = true;

      boot.kernelPackages = mkDefault pkgs.linuxPackages_zen;
      boot.tmp.useTmpfs = false;

      services.udisks2.enable = true;
      services.fwupd.enable = mkDefault true;
      
      cogisys = {
        nix = enabled;

        awesome.enable = gui.enable;

        tools = {
          git = enabled;
          zsh = enabled;
          starship = mkDefault enabled;
        };

        services = {
          openssh = enabled;
          tailscale = enabled;
        };

        system = {
          boot = enabled;
          locale = enabled;
          networking = enabled;
          printing = mkDefault enabled;
          audio = mkDefault enabled;
        };
      };

      environment.shellAliases = {
        cls = "clear";
        mkdir = "mkdir -p";
        ls = "eza";
        udm = "udisksctl mount -b";
      };

      environment.shellInit = ''
        mkcd() {
          mkdir -p $1
          cd $1
        }
      '';

      environment.variables = {
        EDITOR = "nvim";
        DO_NOT_TRACK = 1;
      };
      
      systemd.extraConfig = ''
        DefaultTimeoutStopSec=10s
      '';

      environment.etc."security/limits.conf".text = ''
        # DO NOT EDIT! Autogenerated file
        root     hard     nofile     1048576
        root     soft     nofile     1048576
      '';

    })
    (mkIf config.services.fwupd.enable {
      system.activationScripts = with pkgs; {
        restart-fwupd = "${systemd}/bin/systemctl stop fwupd.service";
      };
    })
  ];
}
