#+TITLE: CogiSystems Emacs config
#+AUTHOR: Giulio Cocconi
#+EMAIL: coccogiulio8@gmail.com

* Init
** Speed up loadtime
Some ideas are stealed from https://git.sr.ht/~knazarov/nixos/tree/master/item/emacs.el.

*** GC
Prevent aggressive garbage collecting by increasing the threshold temporarily, restoring it at the end.

#+BEGIN_SRC emacs-lisp :tangle emacs.d/early-init.el 
  (setq gc-cons-threshold 402653184
	gc-cons-percentage 0.6)
#+END_SRC

*** Disable unnecessary things
Disable unnecessary ways to handle files during startup.

#+BEGIN_SRC emacs-lisp :tangle emacs.d/early-init.el
  (defvar saved--file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+END_SRC

*** Restore default
You have to restore the defaults after the init.

#+begin_src emacs-lisp :tangle emacs.d/early-init.el
  (add-hook 'after-init-hook #'(lambda ()
				 (setq gc-cons-threshold 16777216
				       gc-cons-percentage 0.1)
				 (setq file-name-handler-alist saved--file-name-handler-alist)))
#+end_src

* Utils
Here there are some misc utils (functions or vars).
#+begin_src emacs-lisp :tangle emacs.d/early-init.el

  (defvar is-nix (getenv "NIX_EMACS")
    "If non-nil then consider emacs as configured by Nix Emacs Overlay")

  (defvar language-list nil
    "The list of programming languages supported by this config that are manually managed  (if `is-nix' is non-nil then you can, and actually should, manage your programming languages with nix)")

  (defun is-language-active (lang)
    (or (and is-nix
	     (or (getenv (concat "NIX_LANG_" (upcase lang)))
		 (string-equal lang "nix")))
	(member lang language-list)))

  (defun add-multiple-hooks (hooks fun)
    "Add function to multiple hooks"
    (dolist (hook hooks)
      (add-hook hook fun)))
    #+end_src

* ~user-emacs-directory~
When using Nix, in order to preserve reproducibility, the ~user-emacs-directory~ variable is set to ~/etc/emacs.d~. When the config is loaded ~$HOME/.emacs.d~ should be used in order to avoid write permission errors.
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (when is-nix
    (setq user-emacs-directory "~/emacs.d"))
#+end_src

* Packages setup
If the config isn't managed by Nix then download Melpa, Elpa and Org archives. If it's using Nix then packages should be managed by emacs-overlay's ~emacsWithPackagesFromUsePackage~ ( see https://github.com/nix-community/emacs-overlay ).

#+begin_src emacs-lisp :tangle emacs.d/init.el
  (unless is-nix
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents)))
#+end_src

If it's not on a Linux Platform then we should actually install ~use-package~:
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+end_src


Then we can require and configure it:
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* State files
** Recent files
From https://www.emacswiki.org/emacs/RecentFiles:
==Recentf is a minor mode that builds a list of recently opened files. This list is automatically saved across sessions on exiting Emacs - you can then access this list through a command or the menu.==

#+begin_src emacs-lisp :tangle emacs.d/init.el
  (setq recentf-save-file "~/.emacs.d/recentf"
	recentf-filename-handlers '(file-truename)
	recentf-exclude (list "^/tmp/"))
  (recentf-mode 1)
#+end_src

** Backup files
From https://www.emacswiki.org/emacs/BackupDirectory:
==By default Emacs saves BackupFiles under the original name with a tilde `~â€™ appended [...] This is primitive and boring.==

Let's fix that by placing all Backup Files in the temp directory (which is ~/tmp~ on Linux and ~/Temp~ on Windows)

#+begin_src emacs-lisp :tangle emacs.d/init.el
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+end_src

* Appearence
** Disable GUI and bloat
#+begin_src emacs-lisp  :tangle emacs.d/init.el
  (setq-default inhibit-startup-screen t)
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (setq visible-bell nil)
#+end_src

** Set CoGiSystems scratch message
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (setq initial-scratch-message (purecopy "\
  ;; CoGiSystems emacs
  ;; Remember to have fun :)

  "))
#+end_src

** Line numbers
Use relative line numbers:
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (setq display-line-numbers-type 'relative)
#+end_src

They should be active when in ~prog-mode~:
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Tiling WM
Emacs will, by default, size its window by charactes, since this usually doesn't fit to an exact pixel size, it might cause Tiling WMs to display unnecessary gaps. Let's fix it!
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (setq frame-resize-pixelwise t)
#+end_src

** Highlighters
*** goto-address-mode
Use ~goto-address-mode~ to highlight internet and mail addresses.
BUG: (https://google.com)

#+begin_src emacs-lisp :tangle emacs.d/init.el
  (global-goto-address-mode)
#+end_src

Set the addresses to be displayed in italic and underlined.

#+begin_src emacs-lisp :tangle emacs.d/init.el
  (setq goto-address-url-face 'ansi-color-italic
	goto-address-url-mouse-face 'ansi-color-underline
	goto-address-mail-face 'ansi-color-italic
	goto-address-mail-mouse-face 'ansi-color-underline)
#+end_src

*** hl-todo
Use ~hl-todo~ to underline certain comment's tags, enable it in ~prog-mode~ and ~org-mode~.

#+begin_src emacs-lisp :tangle emacs.d/init.el
  (use-package hl-todo
    :hook ((prog-mode org-mode) . hl-todo-mode)
#+end_src

** Fonts & theme
Use Iosevka Nerd Font as default font:

#+begin_src emacs-lisp :tangle emacs.d/init.el
  (set-face-attribute 'default nil :font "Iosevka Nerd Font" :height 130)
#+end_src

Use ~doom-one~ as default theme:
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)

    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Misc
In ~prog-mode~ there should be autoparens, whilst in ~org-mode~ and ~text-mode~ visual-line-mode should be enabled.

#+begin_src emacs-lisp :tangle emacs.d/init.el
  (add-hook 'prog-mode-hook 'electric-pair-mode)
  (add-multiple-hooks '(org-mode-hook text-mode-hook) 'visual-line-mode)
#+end_src

* Keybindings
** General
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (use-package general
    :config ())
#+end_src

** which-key
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (use-package which-key
    :init (which-key-mode))
#+end_src
* Eshell
When Eshell is killed, delete its window (unless it's the only one):
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (advice-add 'eshell-life-is-too-much
	      :after #'(lambda ()
			 (unless (one-window-p)
			   (delete-window))))
#+end_src

I should be able to create a virtual terminal with one keystroke.
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (defun split-eshell ()
    "Create a split window below the current one, with an eshell"
    (interactive)
    (select-window (split-window-below))
    (eshell))
#+end_src

* Packages
** Counsel, Ivy & co.
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (use-package counsel)
  (use-package swiper) 
  (use-package ivy
    :init (ivy-mode)
    :after counsel
    :bind (("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file)
	   ("<f1> f" . counsel-describe-function)
	   ("<f1> v" . counsel-describe-variable)
	   ("<f1> o" . counsel-describe-symbol)
	   ("<f1> l" . counsel-find-library)
	   ("<f2> i" . counsel-info-lookup-symbol)
	   ("<f2> u" . counsel-unicode-char)
	   ("C-c g" . counsel-git)
	   ("C-c j" . counsel-git-grep)
	   ("C-c k" . counsel-ag)
	   ("C-x l" . counsel-locate)
	   ("C-S-o" . counsel-rhythmbox))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq search-default-mode #'char-fold-to-regexp)
#+end_src

** Org
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (use-package org)
#+end_src

When visiting an org config file Emacs should be asking if tangle on save.
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (add-hook 'after-save-hook (lambda ()
			       (when (and (string-equal (buffer-name) "config.org")
					  (y-or-n-p "Tangle?"))
				 (org-babel-tangle))))
#+end_src

** Magit
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (use-package magit)
#+end_src

** Evil
Emulate vim bindings in Emacs, set ~evil-want-keybinding~ to ~nil~ for https://github.com/emacs-evil/evil-collection/issues/60.

#+begin_src emacs-lisp :tangle emacs.d/init.el
  (setq evil-want-keybinding nil)
  (use-package evil
    :init (evil-mode 1))
#+end_src

Add evil collection:
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (use-package evil-collection
    :after evil
    :init (evil-collection-init))
#+end_src

** Company
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (use-package company
    :init (global-company-mode))
#+end_src

** Helpful
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (use-package helpful
    )
#+end_src

** Languages
*** Nix
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (when (is-language-active "nix")
    (use-package nix-mode
      :mode "\\.nix\\'"))
#+end_src

*** Common Lisp
#+begin_src emacs-lisp :tangle emacs.d/init.el
  (when (is-language-active "clisp")
    (use-package slime
      :config (setq inferior-lisp-program "sbcl")))
#+end_src
