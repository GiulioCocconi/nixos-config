#!/bin/sh

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([remote])
# ARG_OPTIONAL_SINGLE([hostname])
# ARG_OPTIONAL_BOOLEAN([upgrade])
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.11.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_remote=
_arg_hostname=
_arg_upgrade="off"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [--remote <arg>] [--hostname <arg>] [--(no-)upgrade] [-h|--help]\n' "$0"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	local _key
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--remote)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_remote="$2"
				shift
				;;
			--remote=*)
				_arg_remote="${_key##--remote=}"
				;;
			--hostname)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_hostname="$2"
				shift
				;;
			--hostname=*)
				_arg_hostname="${_key##--hostname=}"
				;;
			--no-upgrade|--upgrade)
				_arg_upgrade="on"
				test "${1:0:5}" = "--no-" && _arg_upgrade="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


hostname=$(hostname)

[[ -n "$_arg_remote" ]] && hostname="$_arg_remote"
[[ -n "$_arg_hostname" ]] && hostname="$_arg_hostname"


command_arguments=("." "--hostname" "$hostname")

cd $(dirname $0)
echo "Building CoGiSystems configuration for $hostname"

if [[ "$_arg_upgrade" != "off" ]]; then
    if ! git diff --staged --quiet; then
	echo "Commit the changes before running an upgrade!"
        exit 1
    fi

    git pull

    nix flake update
    git add flake.lock flake.nix

    [[ -z $(git status | grep "Your branch is ahead of") ]] && read -p "Push? [y/N] " push

    git commit -m "Updated"

    [[ ${push^^} == "Y" || ${push^^} == "yes" ]] && git push
   command_arguments+=("--update")
fi

if [[ -n "$_arg_remote" ]]; then
    command_arguments+=("--target-host" "root@$_arg_remote")

fi

nh os switch "${command_arguments[@]}"

# ] <-- needed because of Argbash
